{"version":3,"sources":["ValidatedLoginForm.js","index.js"],"names":["ValidatedLoginForm","react_default","a","createElement","formik_esm","initialValues","email","password","onSubmit","values","_ref","setSubmitting","setTimeout","console","log","validationSchema","Yup","shape","required","min","matches","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","name","type","placeholder","value","onChange","onBlur","className","disabled","App","src_ValidatedLoginForm","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qOA4FeA,EAxFY,kBACzBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAACC,EAADC,GAA+B,IAApBC,EAAoBD,EAApBC,cACnBC,WAAW,WACTC,QAAQC,IAAI,aAAcL,GAC1BE,GAAc,IACb,MAwBLI,iBAAkBC,WAAaC,MAAM,CACnCX,MAAOU,WACJV,QACAY,SAAS,YACZX,SAAUS,WACPE,SAAS,yBACTC,IAAI,EAAG,sDACPC,QAAQ,cAAe,sCAG3B,SAAAC,GAAS,IAENZ,EAOEY,EAPFZ,OACAa,EAMED,EANFC,QACAC,EAKEF,EALFE,OACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,aAEF,OACE1B,EAAAC,EAAAC,cAAA,QAAMK,SAAUmB,GACd1B,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,SAAf,SACA3B,EAAAC,EAAAC,cAAA,SACE0B,KAAK,QACLC,KAAK,OACLC,YAAY,mBACZC,MAAOvB,EAAOH,MACd2B,SAAUR,EACVS,OAAQR,EACRS,UAAWZ,EAAOjB,OAASgB,EAAQhB,OAAS,UAE7CiB,EAAOjB,OAASgB,EAAQhB,OACvBL,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,kBAAkBZ,EAAOjB,OAE1CL,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,SAAf,YACA3B,EAAAC,EAAAC,cAAA,SACE0B,KAAK,WACLC,KAAK,WACLC,YAAY,sBACZC,MAAOvB,EAAOF,SACd0B,SAAUR,EACVS,OAAQR,EACRS,UAAWZ,EAAOhB,UAAYe,EAAQf,UAAY,UAEnDgB,EAAOhB,UAAYe,EAAQf,UAC1BN,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,kBAAkBZ,EAAOhB,UAE1CN,EAAAC,EAAAC,cAAA,UAAQ2B,KAAK,SAASM,SAAUZ,GAAhC,aC7EV,SAASa,IACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACmC,EAAD,OAKN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO1C,EAAAC,EAAAC,cAACkC,EAAD,MAASE","file":"static/js/main.0ba14803.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\nconst ValidatedLoginForm = () => (\n  <Formik\n    initialValues={{ email: \"\", password: \"\" }}\n    onSubmit={(values, { setSubmitting }) => {\n      setTimeout(() => {\n        console.log(\"Logging in\", values);\n        setSubmitting(false);\n      }, 500);\n    }}\n    //********Handling validation messages yourself*******/\n    // validate={values => {\n    //   let errors = {};\n    //   if (!values.email) {\n    //     errors.email = \"Required\";\n    //   } else if (!EmailValidator.validate(values.email)) {\n    //     errors.email = \"Invalid email address\";\n    //   }\n\n    //   const passwordRegex = /(?=.*[0-9])/;\n    //   if (!values.password) {\n    //     errors.password = \"Required\";\n    //   } else if (values.password.length < 8) {\n    //     errors.password = \"Password must be 8 characters long.\";\n    //   } else if (!passwordRegex.test(values.password)) {\n    //     errors.password = \"Invalida password. Must contain one number\";\n    //   }\n\n    //   return errors;\n    // }}\n    //********Using Yum for validation********/\n\n    validationSchema={Yup.object().shape({\n      email: Yup.string()\n        .email()\n        .required(\"Required\"),\n      password: Yup.string()\n        .required(\"No password provided.\")\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    })}\n  >\n    {props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return (\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            name=\"email\"\n            type=\"text\"\n            placeholder=\"Enter your email\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.email && touched.email && \"error\"}\n          />\n          {errors.email && touched.email && (\n            <div className=\"input-feedback\">{errors.email}</div>\n          )}\n          <label htmlFor=\"email\">Password</label>\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.password && touched.password && \"error\"}\n          />\n          {errors.password && touched.password && (\n            <div className=\"input-feedback\">{errors.password}</div>\n          )}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Login\n          </button>\n        </form>\n      );\n    }}\n  </Formik>\n);\n\nexport default ValidatedLoginForm;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport ValidatedLoginForm from \"./ValidatedLoginForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Validated Login Form</h1>\n      <ValidatedLoginForm />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}